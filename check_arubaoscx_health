#!/usr/bin/perl -w

package SNMP;
	use strict;
	use Data::Dumper;

	my $nametable={
		"sysDescr"		=> { oid => ".1.3.6.1.2.1.1.1" },
		"sysName"		=> { oid => ".1.3.6.1.2.1.1.5" },
		"arubaWiredFanState"	=> { oid => ".1.3.6.1.4.1.47196.4.1.1.3.11.5.1.1.5" },
		"arubaWiredFanName"	=> { oid => ".1.3.6.1.4.1.47196.4.1.1.3.11.5.1.1.4" },
		"arubaWiredVsxDeviceRole" => { oid => ".1.3.6.1.4.1.47196.4.1.1.3.7.1.4.1",
			value => "table",
			values => {
				1 => "primary",
				2 => "secondary",
				3 => "notConfigured"
			}
		},
		"arubaWiredVsxConfigSync" => { oid => ".1.3.6.1.4.1.47196.4.1.1.3.7.1.4.2",
			value => "table",
			values => {
				1 => "enabled",
				2 => "disabled"
			}
		},
		"arubaWiredVsxIslOperState" => { oid => ".1.3.6.1.4.1.47196.4.1.1.3.7.2.1.1",
			value => "table",
			values => {
				1 => "init",
				2 => "outSync",
				3 => "inSync"
			}
		},
		"arubaWiredPSUName" => { oid => ".1.3.6.1.4.1.47196.4.1.1.3.11.2.1.1.3" },
		"arubaWiredPSUState" => { oid => ".1.3.6.1.4.1.47196.4.1.1.3.11.2.1.1.4" }
	};

	sub new {
		my ($class, $host, $community) = @_;

		my $self={};
		bless $self, $class;

		$self->reversemap();
		$self->snmp_new_session($host, $community);

		return $self;
	}

	sub snmp_new_session {
		my ($self, $host, $community) = @_;

                my ($session,$error)=Net::SNMP->session(
			Hostname => $host,
			Version	 => 2,
			Timeout  => 2,
			Community => $community
		);

		$self->{netsnmp}=$session;
	}

	sub reversemap {
		my ($self) = @_;
		foreach my $key ( keys %{$nametable} ) {
			my $value=$nametable->{$key};
			$self->{reversetable}{$value->{oid}}=$key;
		}
	}

	sub name2oid {
		my ($self, $mixname) = @_;

		my ($name, $instance) = ($mixname =~ /^([^.]+)([\d\.]*)$/);
		my $oid=$nametable->{$name}{oid} . $instance;

		#printf("Mixname $mixname Name: $name instance $instance oid $oid\n");

		return $oid;
	}

	sub oid2name {
		my ($self, $oid) = @_;
		my ($full, $name, $instance) = $self->oid2name_all($oid);
		return $full;
	}

	sub instance_decode_string {
		my ($self, $instance) = @_;

		# .100.97.116.97.51 = STRING: "data3"
		my $string="";	
		while($instance =~ s/^\.(\d+)//) {
			$string.=chr($1);
		}
		return $string
	}

	sub instance_decode_uuidnum {
		my ($self, $instance) = @_;
		# .36.49.48.51.99.55.102.100.100.45.51.50.56.99.45.54.102.98.101.45.98.55.55.55.45.100.57.98.50.102.48.98.48.50.49.97.57.1
		$instance =~ s/^\.//;
		my @elem=split(/\./, $instance);
		my $count=shift @elem;
		my $uuid=join("", map { chr($_) } splice(@elem, 0, $count));

		return sprintf('"%s".%s', $uuid, join(".", @elem));
	}


	sub value_decode_table {
		my ($self, $value, $def) = @_;

		my $tvalue=$def->{values}{$value};
		if (defined($tvalue)) {
			return { value => $value, string => $tvalue, full => sprintf("%s(%d)", $tvalue, $value) };
		}

		return { value => $value };
	}

	sub value_decode_fixup_decimal {
		my ($self, $value, $def) = @_;

		$value=~s/,//g;

		return { value => $value };
	}

	sub value_decode {
		my ($self, $name, $value) = @_;

		my $def=$nametable->{$name};
		if (!defined($def) || !defined($def->{value})) {
			return { value => $value };
		}

		if ($def->{value} eq "table") {
			return $self->value_decode_table($value, $def);
		} elsif ($def->{value} eq "fixupdecimal") {
			return $self->value_decode_fixup_decimal($value, $def);
		}

		return { value => $value };
	}

	sub instance_decode {
		my ($self, $name, $instance) = @_;

		my $def=$nametable->{$name};
		if (!defined($def) || !defined($def->{instance})) {
			return $instance;
		}

		if ($def->{instance} eq 'string') {
			return $self->instance_decode_string($instance);
		} elsif ($def->{instance} eq 'uuidnum') {
			return $self->instance_decode_uuidnum($instance);
		}

		return $instance;
	}

	sub oid2name_all {
		my ($self, $oid) = @_;

		my $instance="";
		while(length($oid) > 1) {
			my $name=$self->{reversetable}{$oid};
			if (defined($name)) {
				return ( $name . $instance, $name, $self->instance_decode($name, $instance) );
			}

			$oid =~ s/(\.\d+)$//;
			$instance=$1 . $instance;
		}
		die("OID Problem: $oid $instance");
	}

	sub _parse_request {
		my $self=shift;
		my @request=map { $self->name2oid($_) } @_;
		return \@request;
	}

	sub _parse_response {
		my ($self, $roid, $error) = @_;

		my $r={};
		foreach my $k ( keys %{$roid} ) {
			my $value=$roid->{$k};
			my ($full, $name, $instance)=$self->oid2name_all($k);
			$r->{$full}={ name => $name, instance => $instance, value => $self->value_decode($name, $value) };
		}

		$r->{_error}=$error;

		return $r;
	}
	
	sub get {
		my ($self, @args) = @_;

		my $r=$self->{netsnmp}->get_request(-varbindlist =>
			$self->_parse_request(@args));

		return $self->_parse_response($r, $self->{netsnmp}->error());
	}

	sub walk {
		my ($self, $base) = @_;

		my $r=$self->{netsnmp}->get_table(-baseoid => $self->name2oid($base));
		return $self->_parse_response($r, $self->{netsnmp}->error());
	}

1;

package AOS;
	use strict;
	use Net::SNMP;
	use Data::Dumper;

	sub new {
		my ($class, $snmp) = @_;
		my $self = {
			snmp => $snmp,
		};

	 	bless $self, $class;

		return $self;
	}

	sub merge_tables_by_instance {
		my ($self, @tables) = @_;

		my $result={};

		foreach my $table ( @tables ) {
			foreach my $k ( keys %${table} ) {
				next if ($k =~ /_error/);
				my $v=$table->{$k};

				my $i=$v->{instance};
				$i=~s/^\.//;
				$result->{$i}{$v->{name}}=$v->{value};
			}
		}

		return $result;
	}

	sub vsx_status {
		my ($self) = @_;

		return sprintf("%s sync %s %s",
			$self->{vsxDeviceRole}{"arubaWiredVsxDeviceRole.0"}{value}{string},
			$self->{vsxConfigSync}{"arubaWiredVsxConfigSync.0"}{value}{string},
			$self->{vsxIslOperState}{"arubaWiredVsxIslOperState.0"}{value}{string});
	}

	sub vsx_ok {
		my ($self) = @_;

		if ($self->{vsxConfigSync}{"arubaWiredVsxConfigSync.0"}{value}{string} ne 'enabled') {
			return 0;
		}

		if ($self->{vsxIslOperState}{"arubaWiredVsxIslOperState.0"}{value}{string} ne 'inSync') {
			return 0;
		}

		return 1;
	}

	sub vsx_enabled {
		my ($self) = @_;

		if ($self->{vsxDeviceRole}{_error} ne '') {
			return 0;
		}

		if ($self->{vsxDeviceRole}{"arubaWiredVsxDeviceRole.0"}{value}{value} =~ /(noSuchObject|noSuchInstance|notConfigured)/) {
			return 0;
		}
		return 1;
	}

	sub vsx_read {
		my ($self) = @_;

		$self->{vsxDeviceRole}=$self->{snmp}->get("arubaWiredVsxDeviceRole.0");
		$self->{vsxConfigSync}=$self->{snmp}->get("arubaWiredVsxConfigSync.0");
		$self->{vsxIslOperState}=$self->{snmp}->get("arubaWiredVsxIslOperState.0");
	}

	sub fans_status {
		my ($self) = @_;

		my @fans=values %{$self->{fans}};
		my @nonok=grep { $_->{arubaWiredFanState}{value} ne 'ok' } @fans;

		if (scalar @fans == 0) {
			return "No FANs found";
		}

		if (scalar @nonok == 0) {
			return sprintf("%d ok", scalar @fans);
		}

		my @status=map { $_->{arubaWiredFanName}{value} . " " . $_->{arubaWiredFanState}{value} } @nonok;
		return sprintf("%s %s", join(",", @status));
	}

	sub fans_ok {
		my ($self) = @_;

		my @nonok=grep { $_->{arubaWiredFanState}{value} ne 'ok' } values %{$self->{fans}};

		return scalar @nonok == 0;
	}

	sub fans_read {
		my ($self) = @_;

		my $state=$self->{snmp}->walk("arubaWiredFanState");
		my $name=$self->{snmp}->walk("arubaWiredFanName");

		#$state->{"arubaWiredFanState.1.1.9"}{value}{value}="not ok";

 		$self->{fans}=$self->merge_tables_by_instance($state, $name);
	}

	sub psu_status {
		my ($self) = @_;

		my @psu=values %{$self->{psu}};
		my @nonok=grep { $_->{arubaWiredPSUState}{value} ne 'ok' } @psu;

		if (scalar @psu == 0) {
			return "No PSUs found";
		}

		if (scalar @nonok == 0) {
			return sprintf("%d ok", scalar @psu);
		}

		my @status=map { $_->{arubaWiredPSUName}{value} . " " . $_->{arubaWiredPSUState}{value} } @nonok;
		return sprintf("%s", join(",", @status));
	}

	sub psu_ok {
		my ($self) = @_;

		my @nonok=grep { $_->{arubaWiredPSUState}{value} ne 'ok' } values %{$self->{psu}};

		return scalar @nonok == 0;
	}

	sub psu_read {
		my ($self) = @_;

		my $state=$self->{snmp}->walk("arubaWiredPSUState");
		my $name=$self->{snmp}->walk("arubaWiredPSUName");

		#$state->{"arubaWiredPSUState.1.1"}{value}{value}="not ok";

 		$self->{psu}=$self->merge_tables_by_instance($state, $name);
	}

	sub sysDescr {
		my ($self) = @_;
		return $self->{sysDescr}{"sysDescr.0"}{value}{value};
	}

	sub read {
		my ($self) = @_;

		$self->{sysDescr}=$self->{snmp}->get("sysDescr.0");

		if ($self->{sysDescr}{_error} ne '') {
			return (0, $self->{sysDescr}{_error});
		}

		$self->vsx_read();
		$self->fans_read();
		$self->psu_read();

		return (1, undef);
	}
1;

package main;

	use strict;
	use open IO => ":encoding(utf-8)";
	use open ':std';
	use Data::Dumper;
	use POSIX;

	use Monitoring::Plugin;
	use Getopt::Long::Descriptive;
	use FindBin qw($Bin $Script);

	my ($opt, $usage) = describe_options(
		"$Script %o <some-arg>",
		[ 'host|H=s',		"Aruba CX OS hostname", { required => 1 } ],
		[ 'community|C=s',	"SNMP community", { default => 'public' } ],
		[ 'timeout|t=i',	"Timeout", { default => 15 } ],
		[],
		[ 'help',               "print usage message and exit", { shortcircuit => 1 } ],
	);

	print($usage->text), exit if $opt->help;

	my $np = Monitoring::Plugin->new(
		timeout => $opt->timeout
	);

	my $snmp=new SNMP($opt->host, $opt->community);
	my $aos=new AOS($snmp);

	my ($rc, $error)=$aos->read();
	if (!$rc) {
		$np->plugin_exit(UNKNOWN, sprintf("Failed to read: %s", $error));
	}

 	$np->add_message(OK, sprintf("%s", $aos->sysDescr()));

 	$np->add_message($aos->fans_ok() ? OK : CRITICAL,
 		sprintf("FAN status: %s", $aos->fans_status()));

 	$np->add_message($aos->psu_ok() ? OK : CRITICAL,
 		sprintf("PSU status: %s", $aos->psu_status()));

	if ($aos->vsx_enabled()) {
		$np->add_message($aos->vsx_ok() ? OK : CRITICAL,
			sprintf("VSX status: %s", $aos->vsx_status()));
	}

	my ($code, $message) = $np->check_messages();
	$np->plugin_exit( $code, $message );
1;
